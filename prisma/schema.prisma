// # // to push to db   npx prisma db push && npx prisma generate
// # // to open studio npx prisma studio

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id                String             @id @default(uuid())
  clerkId           String             @unique
  firstName         String
  lastName          String
  username          String
  email             String
  profileImage      String
  bio               String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Workflow          Workflow[]
  WorkflowDownloads WorkflowDownload[] // Add this relation
}

model Workflow {
  id            String             @id @default(uuid())
  title         String
  content       String             @db.Text
  workflowImage String
  slug          String             @unique
  authorId      String
  author        Profile            @relation(fields: [authorId], references: [clerkId], onDelete: Cascade)
  category      CategoryType
  viewCount     Int                @default(0)
  workFlowJson  Json               @default("{}")
  steps         Json? // Optional JSON array of step text strings
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  downloads     WorkflowDownload[] // Add this relation
}

model WorkflowDownload {
  id           String   @id @default(uuid())
  workflowId   String
  workflow     Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  userId       String
  user         Profile  @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  downloadedAt DateTime @default(now())

  @@unique([workflowId, userId]) // Optional: prevent duplicate download records
}

// Predefined categories
enum CategoryType {
  ai
  secops
  sales
  it_ops
  marketing
  engineering
  devops
  building_blocks
  design
  finance
  hr
  other
  product
  support
}
